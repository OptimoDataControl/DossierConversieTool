{
	"name": "upload doc",
	"properties": {
		"activities": [
			{
				"name": "Ids per File",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set JSON",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat(\n    'select * from teverwerken where id = ''',\n    activity('USP_JSON_per_File').output.firstRow.id,\n    ''''\n)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Database",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "-"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set JSON",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "USP_JSON_per_File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "JSON",
					"value": {
						"value": "@activity('USP_JSON_per_File').output.firstRow.KnSubject",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set Filestreams in JSON var",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Ids per File",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Ids per File').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "FileStream",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Set temp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat(\n    'select * from FileStreams where RowId = ',\n    item().SourceRowId\n)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Database",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "-"
									}
								}
							}
						},
						{
							"name": "Update JSON",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "FileStream",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "JSON",
								"value": {
									"value": "@replace(variables('temp'),concat('[FileStream:',item().SourceRowId,']') ,activity('FileStream').output.firstRow.FileStream )",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set temp",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "temp",
								"value": {
									"value": "@variables('JSON')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "USP_JSON_per_File",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[USP_JSON_per_File]",
						"storedProcedureParameters": {
							"forceRefreshList": {
								"type": "Boolean",
								"value": null
							},
							"InternalRowId": {
								"type": "Int64",
								"value": {
									"value": "@pipeline().parameters.InternalRowId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Database",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "-"
						}
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "UploadDoc2AFAS",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "url",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Filestreams in JSON var",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "now",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@variables('url')",
						"type": "Expression"
					},
					"method": "POST",
					"headers": {
						"Authorization": {
							"value": "@concat(\n    'AfasToken ',base64(pipeline().globalParameters.AFASXMLtoken)\n)",
							"type": "Expression"
						},
						"Content-Type": "application/json; charset=utf-8"
					},
					"body": {
						"value": "@json(variables('JSON'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "url",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "url",
					"value": {
						"value": "@concat('https://',pipeline().globalParameters.KlantNr,'.rest',if(equals(pipeline().globalParameters.AfasTest, true), 'test',''),'.afas.online/ProfitRestServices/connectors/KnSubject')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "LOG SUCCES",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "UploadDoc2AFAS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Database",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "SourceRowId",
									"type": "Int32",
									"value": {
										"value": "@activity('USP_JSON_per_File').output.firstRow.SourceRowId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "InternalRowId",
									"type": "Int32",
									"value": {
										"value": "@activity('USP_JSON_per_File').output.firstRow.InternalRowId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "Succes",
									"type": "Boolean",
									"value": "true",
									"direction": "Input"
								},
								{
									"name": "Dossieritem",
									"type": "Int32",
									"value": {
										"value": "@activity('UploadDoc2AFAS').output['results']['KnSubject']['SbId']",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "Foutmelding",
									"type": "String",
									"value": null,
									"direction": "Input"
								},
								{
									"name": "ProfitLogReference",
									"type": "String",
									"value": null,
									"direction": "Input"
								},
								{
									"name": "RunId",
									"type": "String",
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "TimeStamp",
									"type": "Datetime",
									"value": {
										"value": "@activity('now').output.firstRow.value",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": "insert into [Verwerkt] (SourceRowId, InternalRowId, Succes, Dossieritem, Foutmelding, ProfitLogReference, RunId, TimeStamp)\nVALUES (\n\t@SourceRowId,\n\t@InternalRowId,\n\t@Succes,\n\t@Dossieritem, \n\t@Foutmelding,\n\t@ProfitLogReference,\n\t@RunId,\n\t@TimeStamp\n)"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LOG FOUT",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "UploadDoc2AFAS",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Database",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "SourceRowId",
									"type": "Int32",
									"value": {
										"value": "@activity('USP_JSON_per_File').output.firstRow.SourceRowId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "InternalRowId",
									"type": "Int32",
									"value": {
										"value": "@activity('USP_JSON_per_File').output.firstRow.InternalRowId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "Succes",
									"type": "Boolean",
									"value": "false",
									"direction": "Input"
								},
								{
									"name": "Dossieritem",
									"type": "Int32",
									"value": {
										"value": "@activity('UploadDoc2AFAS').output['results']['KnSubject']['SbId']",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "Foutmelding",
									"type": "String",
									"value": {
										"value": "@if(coalesce(activity('UploadDoc2AFAS').output, false),\nconcat(\n    if(contains(activity('UploadDoc2AFAS').output, 'message'),activity('UploadDoc2AFAS').output['message'], ''),\n    if(contains(activity('UploadDoc2AFAS').output, 'externalMessage'),activity('UploadDoc2AFAS').output['externalMessage'], '')\n    )\n,'Het bestand is te groot om te verwerken.')\n    \n",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "ProfitLogReference",
									"type": "String",
									"value": {
										"value": "@if(coalesce(activity('UploadDoc2AFAS').output, false),\nif(contains(activity('UploadDoc2AFAS').output, 'profitLogReference'),activity('UploadDoc2AFAS').output['profitLogReference'], '')\n,'')\n",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "RunId",
									"type": "String",
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "TimeStamp",
									"type": "Datetime",
									"value": {
										"value": "@activity('now').output.firstRow.value",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": "insert into [Verwerkt] (SourceRowId, InternalRowId, Succes, Dossieritem, Foutmelding, ProfitLogReference, RunId, TimeStamp)\nVALUES (\n\t@SourceRowId,\n\t@InternalRowId,\n\t@Succes,\n\t@Dossieritem, \n\t@Foutmelding,\n\t@ProfitLogReference,\n\t@RunId,\n\t@TimeStamp\n)"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "now",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select dbo.LOCAL_DATE() as value",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Database",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "-"
						}
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "LOG FOUT FILESTREAM",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Set Filestreams in JSON var",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "now",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "Database",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "SourceRowId",
									"type": "Int32",
									"value": {
										"value": "@activity('USP_JSON_per_File').output.firstRow.SourceRowId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "InternalRowId",
									"type": "Int32",
									"value": {
										"value": "@activity('USP_JSON_per_File').output.firstRow.InternalRowId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "Succes",
									"type": "Boolean",
									"value": "false",
									"direction": "Input"
								},
								{
									"name": "Dossieritem",
									"type": "Int32",
									"value": null,
									"direction": "Input"
								},
								{
									"name": "Foutmelding",
									"type": "String",
									"value": "Het bestand is te groot om te verwerken",
									"direction": "Input"
								},
								{
									"name": "ProfitLogReference",
									"type": "String",
									"value": null,
									"direction": "Input"
								},
								{
									"name": "RunId",
									"type": "String",
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "TimeStamp",
									"type": "Datetime",
									"value": {
										"value": "@activity('now').output.firstRow.value",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "NonQuery",
							"text": "insert into [Verwerkt] (SourceRowId, InternalRowId, Succes, Dossieritem, Foutmelding, ProfitLogReference, RunId, TimeStamp)\nVALUES (\n\t@SourceRowId,\n\t@InternalRowId,\n\t@Succes,\n\t@Dossieritem, \n\t@Foutmelding,\n\t@ProfitLogReference,\n\t@RunId,\n\t@TimeStamp\n)"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "upload doc by PS",
				"description": "retry by using powershell",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Set Filestreams in JSON var",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "upload doc by PS",
						"type": "PipelineReference"
					},
					"waitOnCompletion": false,
					"parameters": {
						"InternalRowId": {
							"value": "@pipeline().parameters.InternalRowId",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"InternalRowId": {
				"type": "int"
			}
		},
		"variables": {
			"JSON": {
				"type": "String"
			},
			"temp": {
				"type": "String"
			},
			"url": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Upload"
		},
		"annotations": [],
		"lastPublishTime": "2024-01-10T12:49:28Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}